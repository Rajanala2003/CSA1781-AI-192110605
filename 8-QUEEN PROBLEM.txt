def is_safe(board, row, col, n):
    """Check if a queen can be placed on board[row][col]."""
    for i in range(col):
        if board[row][i] == 1:
            return False
    
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    return True

def solve_n_queens_util(board, col, n, solutions):
    """Utilize backtracking to solve the N-Queens problem."""
    if col >= n:
        solutions.append([row[:] for row in board])
        return
    
    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1
            solve_n_queens_util(board, col + 1, n, solutions)
            board[i][col] = 0  # Backtrack

def solve_n_queens(n):
    """Solve the N-Queens
